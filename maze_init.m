% intialize the audio maze and peripherals (mocap, lsl audio control
% stream)

% maze_lines and maze_polygons are generated by a call to
% make_maze_polygons (for a random maze) or make_maze_polygons_nr (for a
% predetermined maze)

function mr = maze_init(maze_lines, maze_polygons, n_rows, n_cols, doVR)


    if nargin < 5
        doVrPlot = false;
    elseif doVR == false 
        doVrPlot = false;
    else
        doVrPlot = true;
    end
    
    %clear mr;
    %global mr;
    mr = [];
    mr.readFromLSL = true; % ***
    mr.functionHandle = [];
    mr.samplingRate  = 512;%512;
    mr.maxNumberOfFramesInAccumulatedData = 6000;% Inf;
    
    % note: added 11/13/15 DEM
    % mechanism for dealing with emitter drop errors
    % store the last good set of hand emitters and replace 0s 
    % with these values

    %global lastHandMarkers;
    mr.lastHandMarkers = zeros(8,3);

    % mr_init;
    % from the script above:
    maxChannels = 100;
    initialLength = 10000;
    mr.verboseLevel = 1; % 0 is no verbosity, 1 for medium and 2 is for max
    mr.accumulatedData = nan(maxChannels, initialLength);
    mr.numberOfChannelsInAccumulatedData = nan;
    mr.numberOfFramesInAccumulatedData = 0;
    mr.numberOfFramesReceived = 0;
    mr.event = [];
    mr.eventChannelNumber = nan; % when reading from datariver, event channel is not represented as a separate channel, but as the .event field of incoming samples.
    mr.eeg.channelOffset = 0;

    mr.doVrPlot = doVrPlot;

    delete(timerfindall);

    %makoto mr_init_writing('/tmp/AudioSuite', 10, 20); 

    mr.numberOfFramesInAccumulatedData = 0;

    % for mocap, specify mocap channel subset
    mr.mocap.firstChannel = 1; % first channel is events or should be ignored
    mr.mocap.lastChannel = nan; % use nan to make it until the last one that exist
    if isempty(maze_polygons)
        mr.mocap.doVrPlot = false;
    else
        mr.mocap.doVrPlot = true; % commenting out this line confused wall warning system and map configuration too (but refresh rate increased up to 40 Hz); don't delete this line.
    end
     mr.mocap.doSimplePlot = true;

     
    %% make the maze


    % for the maze
    % room dimensions
    w = 6.5;
    h = 6.5;

    mr.am = audioMaze(h, w, n_rows, n_cols, maze_lines, maze_polygons);

    figure(11);
    mr.am.plotMaze();
    hold on;
    
    %% vr world stuff
    % mr_mocap_init;
    % from the above (don't know if we even need this

    if mr.mocap.doVrPlot == true;
        if isfield(mr, 'mocap') && isfield(mr.mocap, 'mocapWorld') && ~isempty(mr.mocap.mocapWorld)
            close(mr.mocap.mocapWorld);
            delete(mr.mocap.mocapWorld);
        end;
        cur_dir = pwd;
        vr_path = strcat(cur_dir,'\vr\minimal_with_axis_captions');
        mocapWorld = vrworld(vr_path, 'new');
        open(mocapWorld);

        

        % mr.mocap.afterInitCallback is a callbck (function or script as string) to be executed after mocap vrml figure
        % is created
        if~isfield(mr.mocap, 'afterInitCallback')
            mr.mocap.afterInitCallback = '';
        end;


        mr.mocap.afterInitCallback = 'mr_draw_maze; mr.mocap.roomWallCollection = vr_add_sccn_mobi_room(mr.mocap.mocapWorld);';

        % add boundaries of sccn room
        % copied from vr_add_sccn_mobi_room.m
        roomWallCollection = vrObjectCollection;
        roomWidth = w;
        roomHeight = h;
        roomWallCollection = roomWallCollection.add(vrVerticalWall(mocapWorld, [-roomWidth, -roomWidth]/2, [roomHeight, -roomHeight]/2, 0.3,0.05, true));
        roomWallCollection = roomWallCollection.add(vrVerticalWall(mocapWorld, [-roomWidth, roomWidth]/2, [-roomHeight, -roomHeight]/2, 0.3,0.05, true));
        roomWallCollection = roomWallCollection.add(vrVerticalWall(mocapWorld, [-roomWidth, roomWidth]/2, [roomHeight, roomHeight]/2, 0.3,0.05, true));
        roomWallCollection = roomWallCollection.add(vrVerticalWall(mocapWorld, [roomWidth, roomWidth]/2, [roomHeight, -roomHeight]/2, 0.3,0.05, true));

        % extend the geometrical representation of walls to extend from very low to
        % very high and cover the whole height of the room
        for i=1:4
            roomWallCollection.object{i}.prism.polygon(3, 1:2) = [-10000 -10000];
            roomWallCollection.object{i}.prism.polygon(3, 3:4) = [10000 10000];
        end;
        mr.mocap.roomWallCollection = roomWallCollection; 
        mr.mocap.mocapWorld = mocapWorld;
        

        
        %% from vr_add_maze
        % values are from the original call from mr_maze_with_lsl.m
        xScale = 1.5;
        yScale = 2;
        wallHeight = .1;
        wallThickness = 2;
        
        xOffset = mean(mean(maze_lines(:, 1:2))) - 0.15;
        yOffset = mean(mean(maze_lines(:, 3:4))) - 0.15;

        mazeLinesForVr = maze_lines;
        mazeLinesForVr(:,1:2) = mazeLinesForVr(:,1:2) - xOffset;
        mazeLinesForVr(:,3:4) = mazeLinesForVr(:,3:4) - yOffset;

        % scale the maze
        
        %mazeLinesForVr = mazeLinesForVr * scale;
        mazeLinesForVr(:,1:2) = mazeLinesForVr(:,1:2) * xScale;
        mazeLinesForVr(:,3:4) = mazeLinesForVr(:,3:4) * yScale;

        % scale ground box
        % mazeXextent = max(max(mazeLinesForVr(:, 1:2))) - min(min(mazeLinesForVr(:, 1:2)));
        % mazeYextent = max(max(mazeLinesForVr(:, 3:4))) - min(min(mazeLinesForVr(:, 3:4)));
        % myworld.ground_box.size = [mazeXextent mazeYextent 5];

        wallCollection = vrObjectCollection;
        for i=1:size(maze_lines,1)
            wallCollection = wallCollection.add(vrVerticalWall(mr.mocap.mocapWorld, mazeLinesForVr(i, 1:2), mazeLinesForVr(i, 3:4) , wallHeight, wallThickness, true));
        end;

   end

    %% initialize LSL, connect to MaxMSP (via patch lslreceive)
    addpath(genpath('C:\DEVEL\labstreaminglayer\LSL\liblsl-Matlab'));
    if isfield(mr,'LSL'), mr = rmfield(mr,'LSL'); end
    mr.LSL.lib = lsl_loadlib();

    %init outlets to MAX
    disp('Initializing LSL outputs to MAX/MSP')
    mr.LSL.MaxMSP.streamInfo(1) = lsl_streaminfo(mr.LSL.lib,'fileplay','AudioControl',6,0,'cf_string','fileplay_AudioControl');
    mr.LSL.MaxMSP.outlet(1) = lsl_outlet(mr.LSL.MaxMSP.streamInfo(1));
    mr.LSL.MaxMSP.streamInfo(2) = lsl_streaminfo(mr.LSL.lib,'handproximity','AudioControl',3,0,'cf_string','handproximity_AudioControl');
    mr.LSL.MaxMSP.outlet(2) = lsl_outlet(mr.LSL.MaxMSP.streamInfo(2));
    mr.LSL.MaxMSP.streamInfo(3) = lsl_streaminfo(mr.LSL.lib,'noisepitch','AudioControl',2,0,'cf_string','noisepitch_AudioControl');
    mr.LSL.MaxMSP.outlet(3) = lsl_outlet(mr.LSL.MaxMSP.streamInfo(3));
    % functions to play a beacon sound, or wall-proximity sound
    % using previous convention of first 6 values being commands to play beacon
    % sounds from a given azimuth. To control wall proximity sounds, the azimuth, scaled
    % proximity, and wall event code are sent as values 7-9. Consider revising this
    % in future.
    % proximityDistance is scaled from 1(at proximityDistance from wall to 0
    % (touching wall)
    %
    %NB: Max lslaudo receiver only takes 8 arguments and expects first argument
    %to be a .wav. We'll needed to rewrite this
    mr.LSL.MaxMSP.play_sound = @(beaconSoundID, soundOn, loop, azimuth, volume, beaconEventCode) ...
        mr.LSL.MaxMSP.outlet(1).push_sample({num2str(beaconSoundID), num2str(soundOn), num2str(loop), num2str(azimuth),...
        num2str(volume), beaconEventCode});
    mr.LSL.MaxMSP.send_hand_proximity = @(proximityDistance, proximityAzimuth, proximityEventCode) ...
        mr.LSL.MaxMSP.outlet(2).push_sample({num2str(proximityDistance), num2str(proximityAzimuth), proximityEventCode});
    mr.LSL.MaxMSP.send_noise_freq = @(pitch, fooEventCode) ...
        mr.LSL.MaxMSP.outlet(3).push_sample({num2str(pitch), fooEventCode});

    %% init input from phasespace
    streaminfo = {};
    disp('Waiting for Mocap stream...')
    while isempty(streaminfo),
        streaminfo = lsl_resolve_byprop(mr.LSL.lib,'type','Mocap',1); % look for mocap device
        drawnow
    end
    disp('Found Mocap Stream')
    mr.LSL.phasespace.streamInfo = streaminfo{1};
    mr.LSL.phasespace.inlet = lsl_inlet(mr.LSL.phasespace.streamInfo);

    %% set up marker indexes
    %sensor numbers will depend on the phasespace profile used
    % these are for head and gloves
    %

    % %% "head and hands" phasespace configuration
    % if 0,
    %     mr.mocap.markers.phasespaceConfiguration = 'head and hands';
    %     mr.mocap.markers.head = 1:4;
    %     mr.mocap.markers.leftHand = 5:12;
    %     mr.mocap.markers.rightHand = 13:18;
    % end

    %% "Full Body 1 with DG (48)" configuration
    %mr.mocap.markers.phasespaceConfiguration = 'Full Body 1 with DG (48)';
    %mr.mocap.markers.head = [1:3 47];
    %mr.mocap.markers.rightHand = 11:18;
    %mr.mocap.markers.leftHand = 23:30;
    %%

    % "4 gloves, 2 heads (dev)" configureation
    mr.mocap.markers.phasespaceConfiguration = '4 gloves, 2 heads (dev)';
    mr.mocap.markers.head = 1:4;
    mr.mocap.markers.rightHand = 5:12;
    mr.mocap.markers.leftHand = 13:20;


end